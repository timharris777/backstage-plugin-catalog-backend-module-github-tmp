{"version":3,"file":"index.cjs.js","sources":["../src/lib/config.ts","../src/lib/github.ts","../src/lib/org.ts","../src/lib/util.ts","../src/processors/GithubDiscoveryProcessor.ts","../src/processors/GithubMultiOrgReaderProcessor.ts","../src/processors/GithubOrgReaderProcessor.ts","../src/providers/GitHubEntityProviderConfig.ts","../src/providers/GitHubEntityProvider.ts","../src/providers/GitHubOrgEntityProvider.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\n\n/**\n * The configuration parameters for a multi-org GitHub processor.\n * @public\n */\nexport type GithubMultiOrgConfig = Array<{\n  /**\n   * The name of the GitHub org to process.\n   */\n  name: string;\n  /**\n   * The namespace of the group created for this org.\n   */\n  groupNamespace: string;\n  /**\n   * The namespace of the users created for this org. If not specified defaults to undefined.\n   */\n  userNamespace: string | undefined;\n}>;\n\nexport function readGithubMultiOrgConfig(config: Config): GithubMultiOrgConfig {\n  const orgConfigs = config.getOptionalConfigArray('orgs') ?? [];\n  return orgConfigs.map(c => ({\n    name: c.getString('name'),\n    groupNamespace: (\n      c.getOptionalString('groupNamespace') ?? c.getString('name')\n    ).toLowerCase(),\n    userNamespace: c.getOptionalString('userNamespace') ?? undefined,\n  }));\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GroupEntity, UserEntity } from '@backstage/catalog-model';\nimport { GithubCredentialType } from '@backstage/integration';\nimport { graphql } from '@octokit/graphql';\n\n// Graphql types\n\nexport type QueryResponse = {\n  organization?: Organization;\n  repositoryOwner?: Organization | User;\n};\n\nexport type Organization = {\n  membersWithRole?: Connection<User>;\n  team?: Team;\n  teams?: Connection<Team>;\n  repositories?: Connection<Repository>;\n};\n\nexport type PageInfo = {\n  hasNextPage: boolean;\n  endCursor?: string;\n};\n\nexport type User = {\n  login: string;\n  bio?: string;\n  avatarUrl?: string;\n  email?: string;\n  name?: string;\n  repositories?: Connection<Repository>;\n};\n\nexport type Team = {\n  slug: string;\n  combinedSlug: string;\n  name?: string;\n  description?: string;\n  avatarUrl?: string;\n  editTeamUrl?: string;\n  parentTeam?: Team;\n  members: Connection<User>;\n};\n\nexport type Repository = {\n  name: string;\n  url: string;\n  isArchived: boolean;\n  defaultBranchRef: {\n    name: string;\n  } | null;\n};\n\nexport type Connection<T> = {\n  pageInfo: PageInfo;\n  nodes: T[];\n};\n\n/**\n * Gets all the users out of a GitHub organization.\n *\n * Note that the users will not have their memberships filled in.\n *\n * @param client - An octokit graphql client\n * @param org - The slug of the org to read\n */\nexport async function getOrganizationUsers(\n  client: typeof graphql,\n  org: string,\n  tokenType: GithubCredentialType,\n  userNamespace?: string,\n): Promise<{ users: UserEntity[] }> {\n  const query = `\n    query users($org: String!, $email: Boolean!, $cursor: String) {\n      organization(login: $org) {\n        membersWithRole(first: 100, after: $cursor) {\n          pageInfo { hasNextPage, endCursor }\n          nodes {\n            avatarUrl,\n            bio,\n            email @include(if: $email),\n            login,\n            name\n          }\n        }\n      }\n    }`;\n\n  // There is no user -> teams edge, so we leave the memberships empty for\n  // now and let the team iteration handle it instead\n  const mapper = (user: User) => {\n    const entity: UserEntity = {\n      apiVersion: 'backstage.io/v1alpha1',\n      kind: 'User',\n      metadata: {\n        name: user.login,\n        annotations: {\n          'github.com/user-login': user.login,\n        },\n      },\n      spec: {\n        profile: {},\n        memberOf: [],\n      },\n    };\n\n    if (userNamespace) entity.metadata.namespace = userNamespace;\n    if (user.bio) entity.metadata.description = user.bio;\n    if (user.name) entity.spec.profile!.displayName = user.name;\n    if (user.email) entity.spec.profile!.email = user.email;\n    if (user.avatarUrl) entity.spec.profile!.picture = user.avatarUrl;\n\n    return entity;\n  };\n\n  const users = await queryWithPaging(\n    client,\n    query,\n    r => r.organization?.membersWithRole,\n    mapper,\n    { org, email: tokenType === 'token' },\n  );\n\n  return { users };\n}\n\n/**\n * Gets all the teams out of a GitHub organization.\n *\n * Note that the teams will not have any relations apart from parent filled in.\n *\n * @param client - An octokit graphql client\n * @param org - The slug of the org to read\n */\nexport async function getOrganizationTeams(\n  client: typeof graphql,\n  org: string,\n  orgNamespace?: string,\n): Promise<{\n  groups: GroupEntity[];\n  groupMemberUsers: Map<string, string[]>;\n}> {\n  const query = `\n    query teams($org: String!, $cursor: String) {\n      organization(login: $org) {\n        teams(first: 100, after: $cursor) {\n          pageInfo { hasNextPage, endCursor }\n          nodes {\n            slug\n            combinedSlug\n            name\n            description\n            avatarUrl\n            editTeamUrl\n            parentTeam { slug }\n            members(first: 100, membership: IMMEDIATE) {\n              pageInfo { hasNextPage }\n              nodes { login }\n            }\n          }\n        }\n      }\n    }`;\n\n  // Gets populated inside the mapper below\n  const groupMemberUsers = new Map<string, string[]>();\n\n  const mapper = async (team: Team) => {\n    const annotations: { [annotationName: string]: string } = {\n      'github.com/team-slug': team.combinedSlug,\n    };\n\n    if (team.editTeamUrl) {\n      annotations['backstage.io/edit-url'] = team.editTeamUrl;\n    }\n\n    const entity: GroupEntity = {\n      apiVersion: 'backstage.io/v1alpha1',\n      kind: 'Group',\n      metadata: {\n        name: team.slug,\n        annotations,\n      },\n      spec: {\n        type: 'team',\n        profile: {},\n        children: [],\n      },\n    };\n\n    if (orgNamespace) {\n      entity.metadata.namespace = orgNamespace;\n    }\n\n    if (team.description) {\n      entity.metadata.description = team.description;\n    }\n    if (team.name) {\n      entity.spec.profile!.displayName = team.name;\n    }\n    if (team.avatarUrl) {\n      entity.spec.profile!.picture = team.avatarUrl;\n    }\n    if (team.parentTeam) {\n      entity.spec.parent = team.parentTeam.slug;\n    }\n\n    const memberNames: string[] = [];\n    const groupKey = orgNamespace ? `${orgNamespace}/${team.slug}` : team.slug;\n    groupMemberUsers.set(groupKey, memberNames);\n\n    if (!team.members.pageInfo.hasNextPage) {\n      // We got all the members in one go, run the fast path\n      for (const user of team.members.nodes) {\n        memberNames.push(user.login);\n      }\n    } else {\n      // There were more than a hundred immediate members - run the slow\n      // path of fetching them explicitly\n      const { members } = await getTeamMembers(client, org, team.slug);\n      for (const userLogin of members) {\n        memberNames.push(userLogin);\n      }\n    }\n\n    return entity;\n  };\n\n  const groups = await queryWithPaging(\n    client,\n    query,\n    r => r.organization?.teams,\n    mapper,\n    { org },\n  );\n\n  return { groups, groupMemberUsers };\n}\n\nexport async function getOrganizationRepositories(\n  client: typeof graphql,\n  org: string,\n): Promise<{ repositories: Repository[] }> {\n  const query = `\n    query repositories($org: String!, $cursor: String) {\n      repositoryOwner(login: $org) {\n        login\n        repositories(first: 100, after: $cursor) {\n          nodes {\n            name\n            url\n            isArchived\n            defaultBranchRef {\n              name\n            }\n          }\n          pageInfo {\n            hasNextPage\n            endCursor\n          }\n        }\n      }\n    }`;\n\n  const repositories = await queryWithPaging(\n    client,\n    query,\n    r => r.repositoryOwner?.repositories,\n    x => x,\n    { org },\n  );\n\n  return { repositories };\n}\n\n/**\n * Gets all the users out of a GitHub organization.\n *\n * Note that the users will not have their memberships filled in.\n *\n * @param client - An octokit graphql client\n * @param org - The slug of the org to read\n * @param teamSlug - The slug of the team to read\n */\nexport async function getTeamMembers(\n  client: typeof graphql,\n  org: string,\n  teamSlug: string,\n): Promise<{ members: string[] }> {\n  const query = `\n    query members($org: String!, $teamSlug: String!, $cursor: String) {\n      organization(login: $org) {\n        team(slug: $teamSlug) {\n          members(first: 100, after: $cursor, membership: IMMEDIATE) {\n            pageInfo { hasNextPage, endCursor }\n            nodes { login }\n          }\n        }\n      }\n    }`;\n\n  const members = await queryWithPaging(\n    client,\n    query,\n    r => r.organization?.team?.members,\n    user => user.login,\n    { org, teamSlug },\n  );\n\n  return { members };\n}\n\n//\n// Helpers\n//\n\n/**\n * Assists in repeatedly executing a query with a paged response.\n *\n * Requires that the query accepts a $cursor variable.\n *\n * @param client - The octokit client\n * @param query - The query to execute\n * @param connection - A function that, given the response, picks out the actual\n *                   Connection object that's being iterated\n * @param mapper - A function that, given one of the nodes in the Connection,\n *               returns the model mapped form of it\n * @param variables - The variable values that the query needs, minus the cursor\n */\nexport async function queryWithPaging<\n  GraphqlType,\n  OutputType,\n  Variables extends {},\n  Response = QueryResponse,\n>(\n  client: typeof graphql,\n  query: string,\n  connection: (response: Response) => Connection<GraphqlType> | undefined,\n  mapper: (item: GraphqlType) => Promise<OutputType> | OutputType,\n  variables: Variables,\n): Promise<OutputType[]> {\n  const result: OutputType[] = [];\n\n  let cursor: string | undefined = undefined;\n  for (let j = 0; j < 1000 /* just for sanity */; ++j) {\n    const response: Response = await client(query, {\n      ...variables,\n      cursor,\n    });\n\n    const conn = connection(response);\n    if (!conn) {\n      throw new Error(`Found no match for ${JSON.stringify(variables)}`);\n    }\n\n    for (const node of conn.nodes) {\n      result.push(await mapper(node));\n    }\n\n    if (!conn.pageInfo.hasNextPage) {\n      break;\n    } else {\n      cursor = conn.pageInfo.endCursor;\n    }\n  }\n\n  return result;\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GroupEntity, UserEntity } from '@backstage/catalog-model';\n\nexport function buildOrgHierarchy(groups: GroupEntity[]) {\n  const groupsByName = new Map(groups.map(g => [g.metadata.name, g]));\n\n  //\n  // Make sure that g.parent.children contain g\n  //\n\n  for (const group of groups) {\n    const selfName = group.metadata.name;\n    const parentName = group.spec.parent;\n    if (parentName) {\n      const parent = groupsByName.get(parentName);\n      if (parent && !parent.spec.children.includes(selfName)) {\n        parent.spec.children.push(selfName);\n      }\n    }\n  }\n\n  //\n  // Make sure that g.children.parent is g\n  //\n\n  for (const group of groups) {\n    const selfName = group.metadata.name;\n    for (const childName of group.spec.children) {\n      const child = groupsByName.get(childName);\n      if (child && !child.spec.parent) {\n        child.spec.parent = selfName;\n      }\n    }\n  }\n}\n\n// Ensure that users have their direct group memberships.\nexport function assignGroupsToUsers(\n  users: UserEntity[],\n  groupMemberUsers: Map<string, string[]>,\n) {\n  const usersByName = new Map(users.map(u => [u.metadata.name, u]));\n  for (const [groupName, userNames] of groupMemberUsers.entries()) {\n    for (const userName of userNames) {\n      const user = usersByName.get(userName);\n      if (user && !user.spec.memberOf?.includes(groupName)) {\n        if (!user.spec.memberOf) {\n          user.spec.memberOf = [];\n        }\n        user.spec.memberOf.push(groupName);\n      }\n    }\n  }\n}\n\n// Ensure that users have their transitive group memberships. Requires that\n// the groups were previously processed with buildOrgHierarchy()\nexport function buildMemberOf(groups: GroupEntity[], users: UserEntity[]) {\n  const groupsByName = new Map(groups.map(g => [g.metadata.name, g]));\n\n  users.forEach(user => {\n    const transitiveMemberOf = new Set<string>();\n\n    const todo = [\n      ...(user.spec.memberOf ?? []),\n      ...groups\n        .filter(g => g.spec.members?.includes(user.metadata.name))\n        .map(g => g.metadata.name),\n    ];\n\n    for (;;) {\n      const current = todo.pop();\n      if (!current) {\n        break;\n      }\n\n      if (!transitiveMemberOf.has(current)) {\n        transitiveMemberOf.add(current);\n        const group = groupsByName.get(current);\n        if (group?.spec.parent) {\n          todo.push(group.spec.parent);\n        }\n      }\n    }\n\n    user.spec.memberOf = [...transitiveMemberOf];\n  });\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function parseGitHubOrgUrl(urlString: string): { org: string } {\n  const path = new URL(urlString).pathname.substr(1).split('/');\n\n  // /backstage\n  if (path.length === 1 && path[0].length) {\n    return { org: decodeURIComponent(path[0]) };\n  }\n\n  throw new Error(`Expected a URL pointing to /<org>`);\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport {\n  DefaultGithubCredentialsProvider,\n  GithubCredentialsProvider,\n  ScmIntegrationRegistry,\n  ScmIntegrations,\n} from '@backstage/integration';\nimport {\n  CatalogProcessor,\n  CatalogProcessorEmit,\n  LocationSpec,\n  processingResult,\n} from '@backstage/plugin-catalog-backend';\nimport { graphql } from '@octokit/graphql';\nimport { Logger } from 'winston';\nimport { getOrganizationRepositories } from '../lib';\n\n/**\n * Extracts repositories out of a GitHub org.\n *\n * The following will create locations for all projects which have a catalog-info.yaml\n * on the default branch. The first is shorthand for the second.\n *\n *    target: \"https://github.com/backstage\"\n *    or\n *    target: https://github.com/backstage/*\\/blob/-/catalog-info.yaml\n *\n * You may also explicitly specify the source branch:\n *\n *    target: https://github.com/backstage/*\\/blob/main/catalog-info.yaml\n *\n * @public\n **/\nexport class GithubDiscoveryProcessor implements CatalogProcessor {\n  private readonly integrations: ScmIntegrationRegistry;\n  private readonly logger: Logger;\n  private readonly githubCredentialsProvider: GithubCredentialsProvider;\n\n  static fromConfig(\n    config: Config,\n    options: {\n      logger: Logger;\n      githubCredentialsProvider?: GithubCredentialsProvider;\n    },\n  ) {\n    const integrations = ScmIntegrations.fromConfig(config);\n\n    return new GithubDiscoveryProcessor({\n      ...options,\n      integrations,\n    });\n  }\n\n  constructor(options: {\n    integrations: ScmIntegrationRegistry;\n    logger: Logger;\n    githubCredentialsProvider?: GithubCredentialsProvider;\n  }) {\n    this.integrations = options.integrations;\n    this.logger = options.logger;\n    this.githubCredentialsProvider =\n      options.githubCredentialsProvider ||\n      DefaultGithubCredentialsProvider.fromIntegrations(this.integrations);\n  }\n  getProcessorName(): string {\n    return 'GithubDiscoveryProcessor';\n  }\n\n  async readLocation(\n    location: LocationSpec,\n    _optional: boolean,\n    emit: CatalogProcessorEmit,\n  ): Promise<boolean> {\n    if (location.type !== 'github-discovery') {\n      return false;\n    }\n\n    const gitHubConfig = this.integrations.github.byUrl(\n      location.target,\n    )?.config;\n    if (!gitHubConfig) {\n      throw new Error(\n        `There is no GitHub integration that matches ${location.target}. Please add a configuration entry for it under integrations.github`,\n      );\n    }\n\n    const { org, repoSearchPath, catalogPath, branch, host } = parseUrl(\n      location.target,\n    );\n\n    // Building the org url here so that the github creds provider doesn't need to know\n    // about how to handle the wild card which is special for this processor.\n    const orgUrl = `https://${host}/${org}`;\n\n    const { headers } = await this.githubCredentialsProvider.getCredentials({\n      url: orgUrl,\n    });\n\n    const client = graphql.defaults({\n      baseUrl: gitHubConfig.apiBaseUrl,\n      headers,\n    });\n\n    // Read out all of the raw data\n    const startTimestamp = Date.now();\n    this.logger.info(`Reading GitHub repositories from ${location.target}`);\n\n    const { repositories } = await getOrganizationRepositories(client, org);\n    const matching = repositories.filter(\n      r => !r.isArchived && repoSearchPath.test(r.name),\n    );\n\n    const duration = ((Date.now() - startTimestamp) / 1000).toFixed(1);\n    this.logger.debug(\n      `Read ${repositories.length} GitHub repositories (${matching.length} matching the pattern) in ${duration} seconds`,\n    );\n\n    for (const repository of matching) {\n      const branchName =\n        branch === '-' ? repository.defaultBranchRef?.name : branch;\n\n      if (!branchName) {\n        this.logger.info(\n          `the repository ${repository.url} does not have a default branch, skipping`,\n        );\n        continue;\n      }\n\n      const path = `/blob/${branchName}${catalogPath}`;\n\n      emit(\n        processingResult.location({\n          type: 'url',\n          target: `${repository.url}${path}`,\n          // Not all locations may actually exist, since the user defined them as a wildcard pattern.\n          // Thus, we emit them as optional and let the downstream processor find them while not outputting\n          // an error if it couldn't.\n          presence: 'optional',\n        }),\n      );\n    }\n\n    return true;\n  }\n}\n\n/*\n * Helpers\n */\n\nexport function parseUrl(urlString: string): {\n  org: string;\n  repoSearchPath: RegExp;\n  catalogPath: string;\n  branch: string;\n  host: string;\n} {\n  const url = new URL(urlString);\n  const path = url.pathname.substr(1).split('/');\n\n  // /backstage/techdocs-*/blob/master/catalog-info.yaml\n  // can also be\n  // /backstage\n  if (path.length > 2 && path[0].length && path[1].length) {\n    return {\n      org: decodeURIComponent(path[0]),\n      repoSearchPath: escapeRegExp(decodeURIComponent(path[1])),\n      branch: decodeURIComponent(path[3]),\n      catalogPath: `/${decodeURIComponent(path.slice(4).join('/'))}`,\n      host: url.host,\n    };\n  } else if (path.length === 1 && path[0].length) {\n    return {\n      org: decodeURIComponent(path[0]),\n      host: url.host,\n      repoSearchPath: escapeRegExp('*'),\n      catalogPath: '/catalog-info.yaml',\n      branch: '-',\n    };\n  }\n\n  throw new Error(`Failed to parse ${urlString}`);\n}\n\nexport function escapeRegExp(str: string): RegExp {\n  return new RegExp(`^${str.replace(/\\*/g, '.*')}$`);\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport {\n  DefaultGithubCredentialsProvider,\n  GithubAppCredentialsMux,\n  GithubCredentialsProvider,\n  GitHubIntegrationConfig,\n  ScmIntegrationRegistry,\n  ScmIntegrations,\n} from '@backstage/integration';\nimport {\n  CatalogProcessor,\n  CatalogProcessorEmit,\n  LocationSpec,\n  processingResult,\n} from '@backstage/plugin-catalog-backend';\nimport { graphql } from '@octokit/graphql';\nimport { Logger } from 'winston';\nimport {\n  buildOrgHierarchy,\n  getOrganizationTeams,\n  getOrganizationUsers,\n  GithubMultiOrgConfig,\n  readGithubMultiOrgConfig,\n} from '../lib';\n\n/**\n * Extracts teams and users out of a multiple GitHub orgs namespaced per org.\n *\n * Be aware that this processor may not be compatible with future org structures in the catalog.\n *\n * @public\n */\nexport class GithubMultiOrgReaderProcessor implements CatalogProcessor {\n  private readonly integrations: ScmIntegrationRegistry;\n  private readonly orgs: GithubMultiOrgConfig;\n  private readonly logger: Logger;\n  private readonly githubCredentialsProvider: GithubCredentialsProvider;\n\n  static fromConfig(\n    config: Config,\n    options: {\n      logger: Logger;\n      githubCredentialsProvider?: GithubCredentialsProvider;\n    },\n  ) {\n    const c = config.getOptionalConfig('catalog.processors.githubMultiOrg');\n    const integrations = ScmIntegrations.fromConfig(config);\n\n    return new GithubMultiOrgReaderProcessor({\n      ...options,\n      integrations,\n      orgs: c ? readGithubMultiOrgConfig(c) : [],\n    });\n  }\n\n  constructor(options: {\n    integrations: ScmIntegrationRegistry;\n    logger: Logger;\n    orgs: GithubMultiOrgConfig;\n    githubCredentialsProvider?: GithubCredentialsProvider;\n  }) {\n    this.integrations = options.integrations;\n    this.logger = options.logger;\n    this.orgs = options.orgs;\n    this.githubCredentialsProvider =\n      options.githubCredentialsProvider ||\n      DefaultGithubCredentialsProvider.fromIntegrations(this.integrations);\n  }\n  getProcessorName(): string {\n    return 'GithubMultiOrgReaderProcessor';\n  }\n\n  async readLocation(\n    location: LocationSpec,\n    _optional: boolean,\n    emit: CatalogProcessorEmit,\n  ): Promise<boolean> {\n    if (location.type !== 'github-multi-org') {\n      return false;\n    }\n\n    const gitHubConfig = this.integrations.github.byUrl(\n      location.target,\n    )?.config;\n    if (!gitHubConfig) {\n      throw new Error(\n        `There is no GitHub integration that matches ${location.target}. Please add a configuration entry for it under integrations.github`,\n      );\n    }\n\n    const allUsersMap = new Map();\n    const baseUrl = new URL(location.target).origin;\n\n    const orgsToProcess = this.orgs.length\n      ? this.orgs\n      : await this.getAllOrgs(gitHubConfig);\n\n    for (const orgConfig of orgsToProcess) {\n      try {\n        const { headers, type: tokenType } =\n          await this.githubCredentialsProvider.getCredentials({\n            url: `${baseUrl}/${orgConfig.name}`,\n          });\n        const client = graphql.defaults({\n          baseUrl: gitHubConfig.apiBaseUrl,\n          headers,\n        });\n\n        const startTimestamp = Date.now();\n        this.logger.info(\n          `Reading GitHub users and teams for org: ${orgConfig.name}`,\n        );\n        const { users } = await getOrganizationUsers(\n          client,\n          orgConfig.name,\n          tokenType,\n          orgConfig.userNamespace,\n        );\n        const { groups, groupMemberUsers } = await getOrganizationTeams(\n          client,\n          orgConfig.name,\n          orgConfig.groupNamespace,\n        );\n\n        const duration = ((Date.now() - startTimestamp) / 1000).toFixed(1);\n        this.logger.debug(\n          `Read ${users.length} GitHub users and ${groups.length} GitHub teams from ${orgConfig.name} in ${duration} seconds`,\n        );\n\n        let prefix: string = orgConfig.userNamespace ?? '';\n        if (prefix.length > 0) prefix += '/';\n\n        users.forEach(u => {\n          if (!allUsersMap.has(prefix + u.metadata.name)) {\n            allUsersMap.set(prefix + u.metadata.name, u);\n          }\n        });\n\n        for (const [groupName, userNames] of groupMemberUsers.entries()) {\n          for (const userName of userNames) {\n            const user = allUsersMap.get(prefix + userName);\n            if (user && !user.spec.memberOf.includes(groupName)) {\n              user.spec.memberOf.push(groupName);\n            }\n          }\n        }\n        buildOrgHierarchy(groups);\n\n        for (const group of groups) {\n          emit(processingResult.entity(location, group));\n        }\n      } catch (e) {\n        this.logger.error(\n          `Failed to read GitHub org data for ${orgConfig.name}: ${e}`,\n        );\n      }\n    }\n\n    const allUsers = Array.from(allUsersMap.values());\n    for (const user of allUsers) {\n      emit(processingResult.entity(location, user));\n    }\n\n    return true;\n  }\n\n  // Note: Does not support usage of PATs\n  private async getAllOrgs(\n    gitHubConfig: GitHubIntegrationConfig,\n  ): Promise<GithubMultiOrgConfig> {\n    const githubAppMux = new GithubAppCredentialsMux(gitHubConfig);\n    const installs = await githubAppMux.getAllInstallations();\n\n    return installs\n      .map(install =>\n        install.target_type === 'Organization' &&\n        install.account &&\n        install.account.login\n          ? {\n              name: install.account.login,\n              groupNamespace: install.account.login.toLowerCase(),\n            }\n          : undefined,\n      )\n      .filter(Boolean) as GithubMultiOrgConfig;\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport {\n  DefaultGithubCredentialsProvider,\n  GithubCredentialsProvider,\n  GithubCredentialType,\n  ScmIntegrationRegistry,\n  ScmIntegrations,\n} from '@backstage/integration';\nimport {\n  CatalogProcessor,\n  CatalogProcessorEmit,\n  LocationSpec,\n  processingResult,\n} from '@backstage/plugin-catalog-backend';\nimport { graphql } from '@octokit/graphql';\nimport { Logger } from 'winston';\nimport {\n  assignGroupsToUsers,\n  buildOrgHierarchy,\n  getOrganizationTeams,\n  getOrganizationUsers,\n  parseGitHubOrgUrl,\n} from '../lib';\n\ntype GraphQL = typeof graphql;\n\n/**\n * Extracts teams and users out of a GitHub org.\n *\n * @remarks\n *\n * Consider using {@link GitHubOrgEntityProvider} instead.\n *\n * @public\n */\nexport class GithubOrgReaderProcessor implements CatalogProcessor {\n  private readonly integrations: ScmIntegrationRegistry;\n  private readonly logger: Logger;\n  private readonly githubCredentialsProvider: GithubCredentialsProvider;\n\n  static fromConfig(\n    config: Config,\n    options: {\n      logger: Logger;\n      githubCredentialsProvider?: GithubCredentialsProvider;\n    },\n  ) {\n    const integrations = ScmIntegrations.fromConfig(config);\n\n    return new GithubOrgReaderProcessor({\n      ...options,\n      integrations,\n    });\n  }\n\n  constructor(options: {\n    integrations: ScmIntegrationRegistry;\n    logger: Logger;\n    githubCredentialsProvider?: GithubCredentialsProvider;\n  }) {\n    this.integrations = options.integrations;\n    this.githubCredentialsProvider =\n      options.githubCredentialsProvider ||\n      DefaultGithubCredentialsProvider.fromIntegrations(this.integrations);\n    this.logger = options.logger;\n  }\n  getProcessorName(): string {\n    return 'GithubOrgReaderProcessor';\n  }\n\n  async readLocation(\n    location: LocationSpec,\n    _optional: boolean,\n    emit: CatalogProcessorEmit,\n  ): Promise<boolean> {\n    if (location.type !== 'github-org') {\n      return false;\n    }\n\n    const { client, tokenType } = await this.createClient(location.target);\n    const { org } = parseGitHubOrgUrl(location.target);\n\n    // Read out all of the raw data\n    const startTimestamp = Date.now();\n    this.logger.info('Reading GitHub users and groups');\n\n    const { users } = await getOrganizationUsers(client, org, tokenType);\n    const { groups, groupMemberUsers } = await getOrganizationTeams(\n      client,\n      org,\n    );\n\n    const duration = ((Date.now() - startTimestamp) / 1000).toFixed(1);\n    this.logger.debug(\n      `Read ${users.length} GitHub users and ${groups.length} GitHub groups in ${duration} seconds`,\n    );\n\n    assignGroupsToUsers(users, groupMemberUsers);\n    buildOrgHierarchy(groups);\n\n    // Done!\n    for (const group of groups) {\n      emit(processingResult.entity(location, group));\n    }\n    for (const user of users) {\n      emit(processingResult.entity(location, user));\n    }\n\n    return true;\n  }\n\n  private async createClient(\n    orgUrl: string,\n  ): Promise<{ client: GraphQL; tokenType: GithubCredentialType }> {\n    const gitHubConfig = this.integrations.github.byUrl(orgUrl)?.config;\n\n    if (!gitHubConfig) {\n      throw new Error(\n        `There is no GitHub Org provider that matches ${orgUrl}. Please add a configuration for an integration.`,\n      );\n    }\n\n    const { headers, type: tokenType } =\n      await this.githubCredentialsProvider.getCredentials({\n        url: orgUrl,\n      });\n\n    const client = graphql.defaults({\n      baseUrl: gitHubConfig.apiBaseUrl,\n      headers,\n    });\n\n    return { client, tokenType };\n  }\n}\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\n\nconst DEFAULT_CATALOG_PATH = '/catalog-info.yaml';\nconst DEFAULT_PROVIDER_ID = 'default';\n\nexport type GitHubEntityProviderConfig = {\n  id: string;\n  catalogPath: string;\n  organization: string;\n  filters?: {\n    repository?: RegExp;\n    branch?: string;\n  };\n};\n\nexport function readProviderConfigs(\n  config: Config,\n): GitHubEntityProviderConfig[] {\n  const providersConfig = config.getOptionalConfig('catalog.providers.github');\n  if (!providersConfig) {\n    return [];\n  }\n\n  if (providersConfig.has('organization')) {\n    // simple/single config variant\n    return [readProviderConfig(DEFAULT_PROVIDER_ID, providersConfig)];\n  }\n\n  return providersConfig.keys().map(id => {\n    const providerConfig = providersConfig.getConfig(id);\n\n    return readProviderConfig(id, providerConfig);\n  });\n}\n\nfunction readProviderConfig(\n  id: string,\n  config: Config,\n): GitHubEntityProviderConfig {\n  const organization = config.getString('organization');\n  const catalogPath =\n    config.getOptionalString('catalogPath') ?? DEFAULT_CATALOG_PATH;\n  const repositoryPattern = config.getOptionalString('filters.repository');\n  const branchPattern = config.getOptionalString('filters.branch');\n\n  return {\n    id,\n    catalogPath,\n    organization,\n    filters: {\n      repository: repositoryPattern\n        ? compileRegExp(repositoryPattern)\n        : undefined,\n      branch: branchPattern || undefined,\n    },\n  };\n}\n/**\n * Compiles a RegExp while enforcing the pattern to contain\n * the start-of-line and end-of-line anchors.\n *\n * @param pattern\n */\nfunction compileRegExp(pattern: string): RegExp {\n  let fullLinePattern = pattern;\n  if (!fullLinePattern.startsWith('^')) {\n    fullLinePattern = `^${fullLinePattern}`;\n  }\n  if (!fullLinePattern.endsWith('$')) {\n    fullLinePattern = `${fullLinePattern}$`;\n  }\n\n  return new RegExp(fullLinePattern);\n}\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TaskRunner } from '@backstage/backend-tasks';\nimport { Config } from '@backstage/config';\nimport {\n  GithubCredentialsProvider,\n  ScmIntegrations,\n  GitHubIntegrationConfig,\n  GitHubIntegration,\n  SingleInstanceGithubCredentialsProvider,\n} from '@backstage/integration';\nimport {\n  EntityProvider,\n  EntityProviderConnection,\n  LocationSpec,\n  locationSpecToLocationEntity,\n} from '@backstage/plugin-catalog-backend';\n\nimport { graphql } from '@octokit/graphql';\nimport * as uuid from 'uuid';\nimport { Logger } from 'winston';\nimport {\n  readProviderConfigs,\n  GitHubEntityProviderConfig,\n} from './GitHubEntityProviderConfig';\nimport { getOrganizationRepositories, Repository } from '../lib/github';\n\n/**\n * Discovers catalog files located in [GitHub](https://github.com).\n * The provider will search your GitHub account and register catalog files matching the configured path\n * as Location entity and via following processing steps add all contained catalog entities.\n * This can be useful as an alternative to static locations or manually adding things to the catalog.\n *\n * @public\n */\nexport class GitHubEntityProvider implements EntityProvider {\n  private readonly config: GitHubEntityProviderConfig;\n  private readonly logger: Logger;\n  private readonly integration: GitHubIntegrationConfig;\n  private readonly scheduleFn: () => Promise<void>;\n  private connection?: EntityProviderConnection;\n  private readonly githubCredentialsProvider: GithubCredentialsProvider;\n\n  static fromConfig(\n    config: Config,\n    options: {\n      logger: Logger;\n      schedule: TaskRunner;\n    },\n  ): GitHubEntityProvider[] {\n    const integrations = ScmIntegrations.fromConfig(config);\n    const integration = integrations.github.byHost('github.com');\n\n    if (!integration) {\n      throw new Error(\n        `There is no GitHub config that matches github. Please add a configuration entry for it under integrations.github`,\n      );\n    }\n\n    return readProviderConfigs(config).map(\n      providerConfig =>\n        new GitHubEntityProvider(\n          providerConfig,\n          integration,\n          options.logger,\n          options.schedule,\n        ),\n    );\n  }\n\n  private constructor(\n    config: GitHubEntityProviderConfig,\n    integration: GitHubIntegration,\n    logger: Logger,\n    schedule: TaskRunner,\n  ) {\n    this.config = config;\n    this.integration = integration.config;\n    this.logger = logger.child({\n      target: this.getProviderName(),\n    });\n    this.scheduleFn = this.createScheduleFn(schedule);\n    this.githubCredentialsProvider =\n      SingleInstanceGithubCredentialsProvider.create(integration.config);\n    this.scheduleFn = this.createScheduleFn(schedule);\n  }\n\n  /** {@inheritdoc @backstage/plugin-catalog-backend#EntityProvider.getProviderName} */\n  getProviderName(): string {\n    return `github-provider:${this.config.id}`;\n  }\n\n  /** {@inheritdoc @backstage/plugin-catalog-backend#EntityProvider.connect} */\n  async connect(connection: EntityProviderConnection): Promise<void> {\n    this.connection = connection;\n    return await this.scheduleFn();\n  }\n\n  private createScheduleFn(schedule: TaskRunner): () => Promise<void> {\n    return async () => {\n      const taskId = `${this.getProviderName()}:refresh`;\n      return schedule.run({\n        id: taskId,\n        fn: async () => {\n          const logger = this.logger.child({\n            class: GitHubEntityProvider.prototype.constructor.name,\n            taskId,\n            taskInstanceId: uuid.v4(),\n          });\n          try {\n            await this.refresh(logger);\n          } catch (error) {\n            logger.error(error);\n          }\n        },\n      });\n    };\n  }\n\n  async refresh(logger: Logger) {\n    if (!this.connection) {\n      throw new Error('Not initialized');\n    }\n\n    const targets = await this.findCatalogFiles();\n    const matchingTargets = this.matchesFilters(targets);\n    const entities = matchingTargets\n      .map(repository => this.createLocationUrl(repository))\n      .map(GitHubEntityProvider.toLocationSpec)\n      .map(location => {\n        return {\n          locationKey: this.getProviderName(),\n          entity: locationSpecToLocationEntity({ location }),\n        };\n      });\n\n    await this.connection.applyMutation({\n      type: 'full',\n      entities,\n    });\n\n    logger.info(\n      `Read ${targets.length} GitHub repositories (${entities.length} matching the pattern)`,\n    );\n  }\n\n  // go to the server and get all of the repositories\n  private async findCatalogFiles(): Promise<Repository[]> {\n    const organization = this.config.organization;\n    const host = this.integration.host;\n    const orgUrl = `https://${host}/${organization}`;\n\n    const { headers } = await this.githubCredentialsProvider.getCredentials({\n      url: orgUrl,\n    });\n\n    const client = graphql.defaults({\n      baseUrl: this.integration.apiBaseUrl,\n      headers,\n    });\n\n    const { repositories } = await getOrganizationRepositories(\n      client,\n      organization,\n    );\n\n    return repositories;\n  }\n\n  private matchesFilters(repositories: Repository[]) {\n    const repositoryFilter = this.config.filters?.repository;\n\n    const matchingRepositories = repositories.filter(r => {\n      return !r.isArchived && repositoryFilter\n        ? repositoryFilter?.test(r.name)\n        : true && r.defaultBranchRef?.name;\n    });\n    return matchingRepositories;\n  }\n\n  private createLocationUrl(repository: Repository): string {\n    const branch =\n      this.config.filters?.branch || repository.defaultBranchRef?.name || '-';\n    const catalogFile = this.config.catalogPath.startsWith('/')\n      ? this.config.catalogPath.substring(1)\n      : this.config.catalogPath;\n    return `${repository.url}/blob/${branch}/${catalogFile}`;\n  }\n\n  private static toLocationSpec(target: string): LocationSpec {\n    return {\n      type: 'url',\n      target: target,\n      presence: 'optional',\n    };\n  }\n}\n\n/*\n * Helpers\n */\n\nexport function parseUrl(urlString: string): {\n  org: string;\n  repoSearchPath: RegExp;\n  catalogPath: string;\n  branch: string;\n  host: string;\n} {\n  const url = new URL(urlString);\n  const path = url.pathname.substr(1).split('/');\n\n  // /backstage/techdocs-*/blob/master/catalog-info.yaml\n  // can also be\n  // /backstage\n  if (path.length > 2 && path[0].length && path[1].length) {\n    return {\n      org: decodeURIComponent(path[0]),\n      repoSearchPath: escapeRegExp(decodeURIComponent(path[1])),\n      catalogPath: `/${decodeURIComponent(path.slice(4).join('/'))}`,\n      branch: decodeURIComponent(path[3]),\n      host: url.host,\n    };\n  } else if (path.length === 1 && path[0].length) {\n    return {\n      org: decodeURIComponent(path[0]),\n      repoSearchPath: escapeRegExp('*'),\n      catalogPath: '/catalog-info.yaml',\n      branch: '-',\n      host: url.host,\n    };\n  }\n\n  throw new Error(`Failed to parse ${urlString}`);\n}\n\nexport function escapeRegExp(str: string): RegExp {\n  return new RegExp(`^${str.replace(/\\*/g, '.*')}$`);\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TaskRunner } from '@backstage/backend-tasks';\nimport {\n  ANNOTATION_LOCATION,\n  ANNOTATION_ORIGIN_LOCATION,\n  Entity,\n} from '@backstage/catalog-model';\nimport { Config } from '@backstage/config';\nimport {\n  DefaultGithubCredentialsProvider,\n  GithubCredentialsProvider,\n  GitHubIntegrationConfig,\n  ScmIntegrations,\n  SingleInstanceGithubCredentialsProvider,\n} from '@backstage/integration';\nimport {\n  EntityProvider,\n  EntityProviderConnection,\n} from '@backstage/plugin-catalog-backend';\nimport { graphql } from '@octokit/graphql';\nimport { merge } from 'lodash';\nimport * as uuid from 'uuid';\nimport { Logger } from 'winston';\nimport {\n  assignGroupsToUsers,\n  buildOrgHierarchy,\n  getOrganizationTeams,\n  getOrganizationUsers,\n  parseGitHubOrgUrl,\n} from '../lib';\n\n/**\n * Options for {@link GitHubOrgEntityProvider}.\n *\n * @public\n */\nexport interface GitHubOrgEntityProviderOptions {\n  /**\n   * A unique, stable identifier for this provider.\n   *\n   * @example \"production\"\n   */\n  id: string;\n\n  /**\n   * The target that this provider should consume.\n   *\n   * @example \"https://github.com/backstage\"\n   */\n  orgUrl: string;\n\n  /**\n   * The refresh schedule to use.\n   *\n   * @defaultValue \"manual\"\n   * @remarks\n   *\n   * If you pass in 'manual', you are responsible for calling the `read` method\n   * manually at some interval.\n   *\n   * But more commonly you will pass in the result of\n   * {@link @backstage/backend-tasks#PluginTaskScheduler.createScheduledTaskRunner}\n   * to enable automatic scheduling of tasks.\n   */\n  schedule?: 'manual' | TaskRunner;\n\n  /**\n   * The logger to use.\n   */\n  logger: Logger;\n\n  /**\n   * Optionally supply a custom credentials provider, replacing the default one.\n   */\n  githubCredentialsProvider?: GithubCredentialsProvider;\n}\n\n// TODO: Consider supporting an (optional) webhook that reacts on org changes\n/**\n * Ingests org data (users and groups) from GitHub.\n *\n * @public\n */\nexport class GitHubOrgEntityProvider implements EntityProvider {\n  private readonly credentialsProvider: GithubCredentialsProvider;\n  private connection?: EntityProviderConnection;\n  private scheduleFn?: () => Promise<void>;\n\n  static fromConfig(config: Config, options: GitHubOrgEntityProviderOptions) {\n    const integrations = ScmIntegrations.fromConfig(config);\n    const gitHubConfig = integrations.github.byUrl(options.orgUrl)?.config;\n\n    if (!gitHubConfig) {\n      throw new Error(\n        `There is no GitHub Org provider that matches ${options.orgUrl}. Please add a configuration for an integration.`,\n      );\n    }\n\n    const logger = options.logger.child({\n      target: options.orgUrl,\n    });\n\n    const provider = new GitHubOrgEntityProvider({\n      id: options.id,\n      orgUrl: options.orgUrl,\n      logger,\n      gitHubConfig,\n      githubCredentialsProvider:\n        options.githubCredentialsProvider ||\n        DefaultGithubCredentialsProvider.fromIntegrations(integrations),\n    });\n\n    provider.schedule(options.schedule);\n\n    return provider;\n  }\n\n  constructor(\n    private options: {\n      id: string;\n      orgUrl: string;\n      gitHubConfig: GitHubIntegrationConfig;\n      logger: Logger;\n      githubCredentialsProvider?: GithubCredentialsProvider;\n    },\n  ) {\n    this.credentialsProvider =\n      options.githubCredentialsProvider ||\n      SingleInstanceGithubCredentialsProvider.create(this.options.gitHubConfig);\n  }\n\n  /** {@inheritdoc @backstage/plugin-catalog-backend#EntityProvider.getProviderName} */\n  getProviderName() {\n    return `GitHubOrgEntityProvider:${this.options.id}`;\n  }\n\n  /** {@inheritdoc @backstage/plugin-catalog-backend#EntityProvider.connect} */\n  async connect(connection: EntityProviderConnection) {\n    this.connection = connection;\n    await this.scheduleFn?.();\n  }\n\n  /**\n   * Runs one single complete ingestion. This is only necessary if you use\n   * manual scheduling.\n   */\n  async read(options?: { logger?: Logger }) {\n    if (!this.connection) {\n      throw new Error('Not initialized');\n    }\n\n    const logger = options?.logger ?? this.options.logger;\n    const { markReadComplete } = trackProgress(logger);\n\n    const { headers, type: tokenType } =\n      await this.credentialsProvider.getCredentials({\n        url: this.options.orgUrl,\n      });\n    const client = graphql.defaults({\n      baseUrl: this.options.gitHubConfig.apiBaseUrl,\n      headers,\n    });\n\n    const { org } = parseGitHubOrgUrl(this.options.orgUrl);\n    const { users } = await getOrganizationUsers(client, org, tokenType);\n    const { groups, groupMemberUsers } = await getOrganizationTeams(\n      client,\n      org,\n    );\n    assignGroupsToUsers(users, groupMemberUsers);\n    buildOrgHierarchy(groups);\n\n    const { markCommitComplete } = markReadComplete({ users, groups });\n\n    await this.connection.applyMutation({\n      type: 'full',\n      entities: [...users, ...groups].map(entity => ({\n        locationKey: `github-org-provider:${this.options.id}`,\n        entity: withLocations(\n          `https://${this.options.gitHubConfig.host}`,\n          org,\n          entity,\n        ),\n      })),\n    });\n\n    markCommitComplete();\n  }\n\n  private schedule(schedule: GitHubOrgEntityProviderOptions['schedule']) {\n    if (!schedule || schedule === 'manual') {\n      return;\n    }\n\n    this.scheduleFn = async () => {\n      const id = `${this.getProviderName()}:refresh`;\n      await schedule.run({\n        id,\n        fn: async () => {\n          const logger = this.options.logger.child({\n            class: GitHubOrgEntityProvider.prototype.constructor.name,\n            taskId: id,\n            taskInstanceId: uuid.v4(),\n          });\n\n          try {\n            await this.read({ logger });\n          } catch (error) {\n            logger.error(error);\n          }\n        },\n      });\n    };\n  }\n}\n\n// Helps wrap the timing and logging behaviors\nfunction trackProgress(logger: Logger) {\n  let timestamp = Date.now();\n  let summary: string;\n\n  logger.info('Reading GitHub users and groups');\n\n  function markReadComplete(read: { users: unknown[]; groups: unknown[] }) {\n    summary = `${read.users.length} GitHub users and ${read.groups.length} GitHub groups`;\n    const readDuration = ((Date.now() - timestamp) / 1000).toFixed(1);\n    timestamp = Date.now();\n    logger.info(`Read ${summary} in ${readDuration} seconds. Committing...`);\n    return { markCommitComplete };\n  }\n\n  function markCommitComplete() {\n    const commitDuration = ((Date.now() - timestamp) / 1000).toFixed(1);\n    logger.info(`Committed ${summary} in ${commitDuration} seconds.`);\n  }\n\n  return { markReadComplete };\n}\n\n// Makes sure that emitted entities have a proper location\nexport function withLocations(\n  baseUrl: string,\n  org: string,\n  entity: Entity,\n): Entity {\n  const location =\n    entity.kind === 'Group'\n      ? `url:${baseUrl}/orgs/${org}/teams/${entity.metadata.name}`\n      : `url:${baseUrl}/${entity.metadata.name}`;\n  return merge(\n    {\n      metadata: {\n        annotations: {\n          [ANNOTATION_LOCATION]: location,\n          [ANNOTATION_ORIGIN_LOCATION]: location,\n        },\n      },\n    },\n    entity,\n  ) as Entity;\n}\n"],"names":["ScmIntegrations","DefaultGithubCredentialsProvider","graphql","processingResult","GithubAppCredentialsMux","integration","SingleInstanceGithubCredentialsProvider","uuid","locationSpecToLocationEntity","merge","ANNOTATION_LOCATION","ANNOTATION_ORIGIN_LOCATION"],"mappings":"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"}